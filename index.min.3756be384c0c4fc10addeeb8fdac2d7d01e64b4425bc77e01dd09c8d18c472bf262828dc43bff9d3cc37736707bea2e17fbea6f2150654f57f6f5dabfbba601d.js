var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/devdocs/docs/backend/backend-structure/",title:"Backend Structure",description:"Spring Boot Project Structure.",content:`Packages #For a general overview on Spring packages, see Project Structure and Best Practices.
Centralis22\u0026rsquo;s backend implementation contains the following packages:
Name Comments Config Config. Controller HTTP endpoints. Handler Socket endpoints. Model POJOs. Can be serialized from/to DB and frontend. Repository DB query methods. See Spring Data JPA. Security Classes to validate a user and save his login status. Service Main logic classes. Util Supplementary classes. `}),e.add({id:1,href:"/devdocs/docs/prologue/introduction/",title:"Introduction",description:"Doks is a Hugo theme for building secure, fast, and SEO-ready documentation websites, which you can easily update and customize.",content:`Get started #There are two main ways to get started with Doks:
Tutorial #👉 The Tutorial is intended for novice to intermediate users. Step-by-step instructions on how to start a new Doks project. Tutorial →
Quick Start #👉 The Quick Start is intended for intermediate to advanced users. One page summary of how to start a new Doks project. Quick Start →
Go further #Recipes, Reference Guides, Extensions, and Showcase.
Recipes #Get instructions on how to accomplish common tasks with Doks. Recipes →
Reference Guides #Learn how to customize Doks to fully make it your own. Reference Guides →
Extensions #Get instructions on how to add even more to Doks. Extensions →
Showcase #See what others have build with Doks. Showcase →
Contributing #Find out how to contribute to Doks. Contributing →
Help #Get help on Doks. Help →
`}),e.add({id:2,href:"/devdocs/docs/prologue/quick-start/",title:"Quick Start",description:"One page summary of how to start a new Doks project.",content:`Requirements #Git — latest source release Node.js — latest LTS version or newer Why Node.js?Doks uses npm (included with Node.js) to centralize dependency management, making it easy to update resources, build tooling, plugins, and build scripts. Start a new Doks project #Create a new site, change directories, install dependencies, and start development server.
Create a new site #Doks is available as a child theme and a starter theme.
Child theme #Intended for novice to intermediate users Intended for minor customizations Easily update npm packages — including Doks git clone https://github.com/h-enk/doks-child-theme.git my-doks-site Starter theme #Intended for intermediate to advanced users Intended for major customizations Easily update npm packages git clone https://github.com/h-enk/doks.git my-doks-site Help me chooseNot sure which one is for you? Pick the child theme. Change directories #cd my-doks-site Install dependencies #npm install Start development server #npm run start Doks will start the Hugo development webserver accessible by default at http://localhost:1313. Saved changes will live reload in the browser.
Other commands #Doks comes with commands for common tasks. Commands →
`}),e.add({id:3,href:"/devdocs/docs/prologue/commands/",title:"Commands",description:"Doks comes with commands for common tasks.",content:`💡 You can change the commands in the scripts section of \`./package.json\`. create #Create new content for your site:
npm run create [path] [flags] See also the Hugo docs: hugo new.
Docs based tree #Create a docs based tree — with a single command:
npm run create -- --kind docs [section] For example, create a docs based tree named guides:
npm run create -- --kind docs guides lint #Check scripts, styles, and markdown for errors:
npm run lint scripts #Check scripts for errors:
npm run lint:scripts [-- --fix] styles #Check styles for errors:
npm run lint:styles [-- --fix] markdown #Check markdown for errors:
npm run lint:markdown [-- --fix] clean #Delete temporary directories:
npm run clean start #Start local development server:
npm run start build #Build production website:
npm run build functions #Build Lambda functions:
npm run build:functions preview #Build production website including draft and future content:
npm run build:preview `}),e.add({id:4,href:"/devdocs/docs/important/for-users/",title:"For Users",description:"Instructions for users.",content:` #`}),e.add({id:5,href:"/devdocs/docs/important/",title:"Important",description:"Important information.",content:""}),e.add({id:6,href:"/devdocs/docs/backend/config/",title:"config",description:"config package",content:`WebSocketConfig #To set up a WebSocket endpoint, see StackOverflow implementation in API Overview.
To enable CORS for an endpoint, use setAllowedOriginPatterns().
`}),e.add({id:7,href:"/devdocs/docs/important/for-developers/",title:"For Developers",description:"Instructions for developers.",content:`Local Testing #Backend #Required:
MySQL v5.0. IntelliJ IDE. Java 11, or later. Setup database:
Clone backend repository from Github. Start MySQL. Import testing database from externals/centralis_2_survey.sql. Setup server:
Open folder with IntelliJ. IntelliJ automatically downloads maven dependencies according to pom.xml. Navigate to src/main/resources/application.properties. Change settings. In particular: spring.datasource.url if you have modified SQL ports, or used a different schema name. spring.datasource.username/password server.port to deploy server on a different port, default localhost:8080 Run server:
Open folder with IntelliJ. Navigate to src/main/java/edu.usc.marshall.centrallis22.Application. Click on Run 'Application'. Frontend #Required:
Node.js v12, or later. Tested on v12.22.12 and v18.12.1. Including bundled resources, i.e. npm. Setup environment:
Clone frontend repository from Github. Open terminal and navigate to folder. Use npm i to install dependencies. Change socket connection uri at config/socket.js. Change CSV download uri at pages/session-results.js. Run:
Start server. Wait for server to be ready. Use npm run dev to start NextJS app. The default uri for the application is at localhost:3000. Deployment #Placeholder: Requires instruction for server. In particular, how to import SQL files and set up ngix? and SSL for HTTPs and WebSocket.
`}),e.add({id:8,href:"/devdocs/docs/database/schema-relations/",title:"Schema and Relations",description:"DB Schema and relations.",content:`Overview #draw.io (right click, save)
Session #Type Name Comments INT, PK SEID Session UUID. DATETIME DATE Session creation date. For auto deleting past sessions. INT STAGE Session progress stage (e.g. 1st poll, 2nd poll). Team #Individual students are not registered. Only teams.
Type Name Comments INT, PK TMID INT, FK SEID Session UUID in which the team belongs to. VARCHAR(255) TNAME Team\u0026rsquo;s name (Marshall room number). Must be unique in a session. Password not required. Admin/Instructor #Admins and instructors share a table. Both have equal priviledges to create and administer a session. Admins and instructors have the ability to join any session.
Type Name Comments INT, PK INID VARCHAR(255) UNAME VARCHAR(255) PSWD Instructors are required to have a password. Survey #Stores only survey answers. Survey questions are pre-determined and delivered static to the teams. We do not anticipate any change to the survey questions.
Note: A single MySQL row may store at most 65,535 bytes. The database is created with UTF8MB4, reducing the maximum to 16,384 bytes.
Type Name Comments INT, PK SQID INT, FK SEID Session UUID in which the team belongs to. INT, FK TMID Team who completed the survey. INT SVGRP 1st survey, or 2nd survey. VARCHAR(1023) Q1 Limit answers to 1023 characters. VARCHAR(1023) Q2 VARCHAR(1023) Q3 VARCHAR(1023) Q4 VARCHAR(1023) Q5 `}),e.add({id:9,href:"/devdocs/docs/backend/handler/",title:"handler",description:"handler package",content:`WebSocketAPIHandler #All WebSocket connections to the /api endpoint will be routed to WebSocketAPIHandler. It is the first layer in client-to-server communication.
Spring exposed methods afterConnectionEstablished() and afterConnectionClosed() are used to keep track of existing connections.
`}),e.add({id:10,href:"/devdocs/docs/api/",title:"API",description:"API.",content:""}),e.add({id:11,href:"/devdocs/docs/api/api-overview/",title:"API Overview",description:"API Technology and Configuration.",content:`WebSocket and REST #Frontend-backend communication is done through WebSockets, mimicing REST architecture.
For a working backend example, see StackOverflow implementation.
For a working frontend example, use the following code:
// Default address: http://localhost:8080/.var sock = new SockJS('\u0026lt;Enter your address\u0026gt;');sock.onopen = function() {console.log('open');sock.send('test');};sock.onmessage = function(e) {console.log('message', e.data);};sock.onclose = function() {console.log('close');};`}),e.add({id:12,href:"/devdocs/docs/api/api-basics/",title:"API Basics",description:"Standardized format and requirements for all communications.",content:`Client requests #⚠️ Subject to change.
This metadata must be provided in each frontend-to-server transmission.
⭕ All requests from the frontend to the server must contain at most one action.
{\u0026quot;request_id\u0026quot;: \u0026lt;int\u0026gt;,// Request}session: Required when joining a session. Not required when creating a new session. request_id: Requests may be processed out of order because of multithreading. If the client requires a request to be executed in order, he must wait for a success response, before submitting the next. Server responses #⚠️ Subject to change.
The server must provide a response for each request. It indicates if the request is a success, failure, or other. These responses are analogous to HTTP reponses.
{\u0026quot;message_type\u0026quot;: \u0026quot;respond\u0026quot;,\u0026quot;respond_id\u0026quot;: \u0026lt;int\u0026gt;,\u0026quot;status_code\u0026quot;: \u0026lt;int\u0026gt;,\u0026quot;status_message\u0026quot;: \u0026lt;string\u0026gt;,// Respond}Server broadcasts #⚠️ Subject to change.
The server may broadcast a message to all clients. All client must actively listen to a broadcast.
{\u0026quot;message_type\u0026quot;: \u0026quot;broadcast\u0026quot;,// Broadcast}`}),e.add({id:13,href:"/devdocs/docs/api/all-user/",title:"All Users",description:"API for all users.",content:`login #⚠️ Subject to change.
All users may login. Password encryption is not used in this stage of development.
{// Request\u0026quot;request\u0026quot;: \u0026quot;login\u0026quot;,\u0026quot;content\u0026quot;: {\u0026quot;user_type\u0026quot;: \u0026quot;admin/student\u0026quot;,\u0026quot;user_name\u0026quot;: \u0026lt;string\u0026gt;,\u0026quot;user_pswd\u0026quot;: \u0026lt;string\u0026gt;,\u0026quot;session_id\u0026quot;: \u0026lt;int\u0026gt;},}user_type: Either admin or student. user_name: For admin users, their username. For students, their team name, or room name. user_pswd: For admin users only. Leave empty string for students. session_id: Provide a session_id to join a created session. {// Respond\u0026quot;content\u0026quot;: \u0026lt;int\u0026gt;,}status_code: 200, on success. 400, on non-existant session. 403, on failed admin login. content: On success, session stage. `}),e.add({id:14,href:"/devdocs/docs/api/admin/",title:"Admin",description:"API for admin users.",content:`create_session #⚠️ Subject to change.
The instructor creates a new session.
{// Request\u0026quot;request\u0026quot;: \u0026quot;create_session\u0026quot;,\u0026quot;content\u0026quot;: {\u0026quot;user_name\u0026quot;: \u0026lt;string\u0026gt;,\u0026quot;user_pswd\u0026quot;: \u0026lt;string\u0026gt;},}{// Respond\u0026quot;content\u0026quot;: \u0026lt;int\u0026gt;,}status_code: 200, on success. 403, on credentials failure. content: On success, 6-digit server generated session ID. advance_stage #⚠️ Subject to change.
The instructor advances the simulation to the next stage for all users. For example, from Welcome to Discussion #1.
{// Request\u0026quot;request\u0026quot;: \u0026quot;advance_stage\u0026quot;,\u0026quot;content\u0026quot;: \u0026lt;int\u0026gt;,}content: -1, advance to next stage. Else, advance to a specific stage. {// Broadcast\u0026quot;broadcast\u0026quot;: \u0026quot;advance_stage\u0026quot;,\u0026quot;content\u0026quot;: \u0026lt;int\u0026gt;,}content: Same as request. `}),e.add({id:15,href:"/devdocs/docs/api/team/",title:"Team",description:"API for team users.",content:`submit_poll #⚠️ Subject to change.
The team submits their team decision poll.
{// Request\u0026quot;request\u0026quot;: \u0026quot;submit_poll\u0026quot;,\u0026quot;content\u0026quot;: {\u0026quot;poll_no\u0026quot;: \u0026lt;int\u0026gt;,\u0026quot;poll_response\u0026quot;: [xxx, xxx, xxx],},}poll_no: 1 if 1st poll, 2 if 2nd poll. poll_response: An arrary. 0th item is response to 1st question. `}),e.add({id:16,href:"/devdocs/docs/backend/model/",title:"model",description:"model package",content:`Persisting POJOs #See Database. Includes:
Instructor SimSession Survey Team SimUser #SimUser keeps track of user login status, credentials, etc., and is not persisted into the DB.
`}),e.add({id:17,href:"/devdocs/docs/database/",title:"Database",description:"Database.",content:""}),e.add({id:18,href:"/devdocs/docs/backend/security/",title:"security",description:"security package",content:`Security flow #draw.io (right click, save)
`}),e.add({id:19,href:"/devdocs/docs/help/how-to-update/",title:"How to Update",description:"Regularly update the installed npm packages to keep your Doks website stable, usable, and secure.",content:`💡 Learn more about semantic versioning and advanced range syntax. Check for outdated packages #The npm outdated command will check the registry to see if any (or, specific) installed packages are currently outdated:
npm outdated [[\u0026lt;@scope\u0026gt;/]\u0026lt;pkg\u0026gt; ...] Update packages #The npm update command will update all the packages listed to the latest version (specified by the tag config), respecting semver:
npm update [\u0026lt;pkg\u0026gt;...] `}),e.add({id:20,href:"/devdocs/docs/help/troubleshooting/",title:"Troubleshooting",description:"Solutions to common problems.",content:`Problems updating npm packages #Delete the ./node_modules folder, and run again:
npm install Problems with cache #Delete the temporary directories:
npm run clean `}),e.add({id:21,href:"/devdocs/docs/backend/",title:"Backend",description:"Backend.",content:""}),e.add({id:22,href:"/devdocs/docs/backend/service-request-dispatcher/",title:"service.RequestDispatcher",description:"service.RequestDispatcher class",content:`RequestDispatcher #Wrapper for RequestHandler. Sorts the request by type to avoid bloating WebSocketAPIHandler.
`}),e.add({id:23,href:"/devdocs/docs/aboutdocs/",title:"About Docs",description:"About Devdocs.",content:""}),e.add({id:24,href:"/devdocs/docs/backend/service-request-handler/",title:"service.requesthandler",description:"service.requesthandler package",content:`AbstractRequestHandler #All requesthandlers should inherit AbstractRequestHandler.
`}),e.add({id:25,href:"/devdocs/docs/aboutdocs/quickstart/",title:"Quickstart",description:"Quickstart on Devdocs.",content:`Creating a new folder or page #All contents are located in ./content/en/docs/. Static contents are located in ./static/. Please follow the format of existing directory and file structures to create new content. For advanced instructions, please refer to the Doks website.
`}),e.add({id:26,href:"/devdocs/docs/aboutdocs/key-modifications/",title:"Key Modifications",description:"Modifications to the Doks template.",content:`Basic Modifications #Basic modifications are made according to the Doks tutorial.
Theme Modifications #Theme modifications are located in ./layouts/ and ./static/css.
Functional Modifcations #In ./partials/header/header.html, hard-coded hrefs to direct to the project subdomain /devdocs to support Github project pages. On local testing, clicking Centralis and Get Started will lead to 404.
In ./layouts/index.html, modified layout and hrefs.
In ./markdownlint-cli2.jsonc, set MD009/no-trailing-spaces = false to allow for looser markdown formatting.
`}),e.add({id:27,href:"/devdocs/docs/prologue/",title:"Prologue",description:"Prologue Doks.",content:""}),e.add({id:28,href:"/devdocs/docs/help/",title:"Help",description:"Help Doks.",content:""}),e.add({id:29,href:"/devdocs/docs/",title:"Docs",description:"Docs Doks.",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()